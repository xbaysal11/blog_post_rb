{"version":3,"sources":["components/Products.jsx","App.js","serviceWorker.js","index.js"],"names":["axios","defaults","baseURL","Products","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","isLoaded","storefront","product","user_model","grant_type","username","password","token","post","then","res","data","access_token","_this2","setState","localStorage","setItem","get","concat","params","headers","Authorization","console","log","_this$state2","react_default","a","createElement","className","message","map","i","key","id","attributes","name","type","description","display_price","Component","App","components_Products","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sSAGAA,IAAMC,SAASC,QAAU,2BA6FVC,cAtFb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,WAAY,qBACZC,QAAS,GACTC,WAAY,CACVC,WAAY,WACZC,SAAU,oBACVC,SAAU,aAVFf,uNAe8BG,KAAKI,MAAvCK,eAAYF,eAAYM,mBAE1BpB,IACHqB,KADG,qBACwBL,GAC3BM,KAAK,SAAAC,GAAG,OAAIA,EAAIC,KAAKC,eACrBH,KACC,SAAAC,GACEG,EAAKC,SAAS,CAAEd,UAAU,EAAMO,MAAOG,IACvCK,aAAaC,QAAQ,YAAaN,IAGpC,SAAAX,GACEc,EAAKC,SAAS,CACZd,UAAU,EACVD,mCAIFZ,IACH8B,IADG,GAAAC,OACIjB,EADJ,aAC2B,CAC7BkB,OAAQ,GAIRC,QAAS,CAEPC,cAAa,UAAAH,OAAYX,MAG5BE,KAAK,SAAAC,GAAG,OAAIA,EAAIC,KAAKA,OACrBF,KACC,SAAAC,GACEG,EAAKC,SAAS,CAAEd,UAAU,EAAME,QAASQ,IACzCY,QAAQC,IAAI,8BAAqBb,IAEnC,SAAAX,GACEc,EAAKC,SAAS,CACZd,UAAU,EACVD,+IAMD,IAAAyB,EAC8B9B,KAAKI,MAAlCC,EADDyB,EACCzB,MAAOC,EADRwB,EACQxB,SAAUE,EADlBsB,EACkBtB,QACzB,OACEuB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZ7B,EACC0B,EAAAC,EAAAC,cAAA,qBAAa5B,EAAM8B,SAChB7B,EAGHyB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZ1B,EAAQ4B,IAAI,SAAAC,GAAC,OACZN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYI,IAAKD,EAAEE,IAChCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UAAKI,EAAEG,WAAWC,MAClBV,EAAAC,EAAAC,cAAA,UAAKI,EAAEK,MACPX,EAAAC,EAAAC,cAAA,SAAII,EAAEG,WAAWG,aACjBZ,EAAAC,EAAAC,cAAA,UAAKI,EAAEG,WAAWI,oBAV1Bb,EAAAC,EAAAC,cAAA,iCAnEaY,aCLFC,0LAEjB,OACEf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACc,EAAD,cAJyBF,cCQbG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC","file":"static/js/main.d0bdf29f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\naxios.defaults.baseURL = \"http://10.0.0.35/api\";\n// axios.defaults.headers.common[\"Authorization\"] =\n//   \"Bearer dtso5Z4BFG2ZjEKNj6RL5cTg0UND61B3MaPt6tEBEGg\";\n// axios.defaults.headers.post[\"Content-Type\"] =\n//   \"application/x-www-form-urlencoded\";\n\nclass Products extends Component {\n  constructor() {\n    super();\n    this.state = {\n      error: null,\n      isLoaded: false,\n      storefront: \"/api/v2/storefront\",\n      product: [],\n      user_model: {\n        grant_type: \"password\",\n        username: \"spree@example.com\",\n        password: \"spree123\"\n      }\n    };\n  }\n  async componentDidMount() {\n    const { user_model, storefront, token } = this.state;\n\n    await axios\n      .post(`/spree_oauth/token`, user_model)\n      .then(res => res.data.access_token)\n      .then(\n        res => {\n          this.setState({ isLoaded: true, token: res });\n          localStorage.setItem(\"API_TOKEN\", res);\n          // console.log(\"ðŸ‘‰ Returned data:\", res);\n        },\n        error => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      );\n    await axios\n      .get(`${storefront}/products`, {\n        params: {\n          // access_token: \"dtso5Z4BFG2ZjEKNj6RL5cTg0UND61B3MaPt6tEBEGg\"\"ðŸ‘‰ Returned data:\"\"ðŸ‘‰ Returned data:\"\n          // token: `${token}`\n        },\n        headers: {\n          // Authorization: `Bearer ${localStorage.getItem(\"API_TOKEN\")}`\n          Authorization: `Bearer ${token}`\n        }\n      })\n      .then(res => res.data.data)\n      .then(\n        res => {\n          this.setState({ isLoaded: true, product: res });\n          console.log(\"ðŸ‘‰ Returned data:\", res);\n        },\n        error => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      );\n  }\n\n  render() {\n    const { error, isLoaded, product } = this.state;\n    return (\n      <div className=\"card-list\">\n        {error ? (\n          <div>Error: {error.message}</div>\n        ) : !isLoaded ? (\n          <div>Loading...</div>\n        ) : (\n          <div className=\"card\">\n            {product.map(i => (\n              <div className=\"card-item\" key={i.id}>\n                <div className=\"img\" />\n                <div className=\"content\">\n                  <h1>{i.attributes.name}</h1>\n                  <h5>{i.type}</h5>\n                  <p>{i.attributes.description}</p>\n                  <h3>{i.attributes.display_price}</h3>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\nexport default Products;\n","import React, { Component } from \"react\";\nimport Products from \"./components/Products\";\nimport \"./App.scss\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <Products />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}